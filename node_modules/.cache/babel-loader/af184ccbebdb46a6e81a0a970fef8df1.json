{"ast":null,"code":"var _jsxFileName = \"/home/lorismilloni/Code/repos/study-projects/studies-frontend-filter-planets/src/context/PlanetsProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction Planets(_ref) {\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [number, setNumber] = useState(0);\n  const [columnDefault, setColumnDefault] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      const url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const fuckingPlanets = await fetch(url).then(response => response.json()).then(result => result.results).catch(error => `Aconteceu um erro :( ${error}`);\n      setData(fuckingPlanets);\n      setPlanets(fuckingPlanets);\n    };\n\n    fetchPlanets();\n  }, []); // essa requisição foi feita seguindo esse link que ensina a fazer algo que o course não ensina: https://designcode.io/react-hooks-handbook-fetch-data-from-an-api\n\n  /* const removePlanet = (planetToRemove) => {\n    const changePlanets = [...data.filter((planet) => planet !== planetToRemove)];\n    setPlanets(changePlanets);\n  }; */\n  // console.log(data);\n\n  const filterPlanets = input => {\n    const changePlanets = [...data.filter(planet => planet.name.includes(input))];\n    setPlanets(changePlanets);\n  };\n\n  const handleInputNumberFilter = _ref2 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref2;\n    setNumber(value);\n  };\n\n  const handleColumnOptions = _ref3 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref3;\n    setColumn(value);\n  };\n\n  const handleComparisonOptions = _ref4 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref4;\n    setComparison(value);\n  };\n\n  const handleFilterNumberButton = () => {\n    if (comparison === 'maior que') {\n      const filter = planets.filter(item => item[column] > +number);\n      setPlanets(filter);\n    } else if (comparison === 'menor que') {\n      const filter = planets.filter(item => item[column] < +number);\n      setPlanets(filter);\n    } else {\n      const filter = planets.filter(item => item[column] === number);\n      setPlanets(filter);\n    }\n\n    const filterColumnOption = columnDefault.filter(item => item !== column);\n    setColumnDefault(filterColumnOption);\n  };\n\n  const contextValue = {\n    data,\n    planets,\n    filterPlanets,\n    filterByNumericValues: [{\n      column,\n      comparison,\n      value: number\n    }],\n    number,\n    handleInputNumberFilter,\n    handleColumnOptions,\n    handleComparisonOptions,\n    handleFilterNumberButton,\n    columnDefault\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanets.propTypes = {\n  children: PropTypes.node\n}.isRequired; // como definir props de children: https://stackoverflow.com/questions/42122522/reactjs-what-should-the-proptypes-be-for-this-props-children\n\nexport default Planets; // esse provider foi feito seguindo a monitoria do XPFlix do dia 17/03;","map":{"version":3,"sources":["/home/lorismilloni/Code/repos/study-projects/studies-frontend-filter-planets/src/context/PlanetsProvider.js"],"names":["React","useState","useEffect","PropTypes","PlanetsContext","Planets","children","data","setData","planets","setPlanets","column","setColumn","comparison","setComparison","number","setNumber","columnDefault","setColumnDefault","fetchPlanets","url","fuckingPlanets","fetch","then","response","json","result","results","catch","error","filterPlanets","input","changePlanets","filter","planet","name","includes","handleInputNumberFilter","target","value","handleColumnOptions","handleComparisonOptions","handleFilterNumberButton","item","filterColumnOption","contextValue","filterByNumericValues","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction Planets({ children }) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [number, setNumber] = useState(0);\n  const [columnDefault, setColumnDefault] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      const url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const fuckingPlanets = await fetch(url)\n        .then((response) => response.json())\n        .then((result) => result.results)\n        .catch((error) => `Aconteceu um erro :( ${error}`);\n\n      setData(fuckingPlanets);\n      setPlanets(fuckingPlanets);\n    };\n    fetchPlanets();\n  }, []);\n\n  // essa requisição foi feita seguindo esse link que ensina a fazer algo que o course não ensina: https://designcode.io/react-hooks-handbook-fetch-data-from-an-api\n\n  /* const removePlanet = (planetToRemove) => {\n    const changePlanets = [...data.filter((planet) => planet !== planetToRemove)];\n    setPlanets(changePlanets);\n  }; */\n  // console.log(data);\n\n  const filterPlanets = (input) => {\n    const changePlanets = [...data.filter((planet) => planet.name.includes(input))];\n    setPlanets(changePlanets);\n  };\n\n  const handleInputNumberFilter = ({ target: { value } }) => {\n    setNumber(value);\n  };\n\n  const handleColumnOptions = ({ target: { value } }) => {\n    setColumn(value);\n  };\n\n  const handleComparisonOptions = ({ target: { value } }) => {\n    setComparison(value);\n  };\n\n  const handleFilterNumberButton = () => {\n    if (comparison === 'maior que') {\n      const filter = planets.filter((item) => item[column] > (+number));\n      setPlanets(filter);\n    } else if (comparison === 'menor que') {\n      const filter = planets.filter((item) => item[column] < (+number));\n      setPlanets(filter);\n    } else {\n      const filter = planets.filter((item) => item[column] === number);\n      setPlanets(filter);\n    }\n    const filterColumnOption = columnDefault.filter((item) => item !== column);\n    setColumnDefault(filterColumnOption);\n  };\n\n  const contextValue = {\n    data,\n    planets,\n    filterPlanets,\n    filterByNumericValues: [\n      {\n        column,\n        comparison,\n        value: number,\n      },\n    ],\n    number,\n    handleInputNumberFilter,\n    handleColumnOptions,\n    handleComparisonOptions,\n    handleFilterNumberButton,\n    columnDefault,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanets.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\n// como definir props de children: https://stackoverflow.com/questions/42122522/reactjs-what-should-the-proptypes-be-for-this-props-children\n\nexport default Planets;\n\n// esse provider foi feito seguindo a monitoria do XPFlix do dia 17/03;\n"]},"metadata":{},"sourceType":"module"}